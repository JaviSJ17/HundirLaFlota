/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hundirLaFlota;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Javier
 */
public class generarMiTablero extends javax.swing.JFrame {

    /**
     * Creates new form generarMiTablero
     */
    String[][] miTablero;
    DefaultListModel dlm_listaBarcos = new DefaultListModel();
    int longitudBarco;

    public generarMiTablero() {
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("imagenes/crucero.png")).getImage());
        GridLayout gridLayout = (GridLayout) jpn_generarMiTablero.getLayout();
        miTablero = new String[gridLayout.getRows()][gridLayout.getColumns()];
        lst_barcos.setModel(dlm_listaBarcos);
        generarListaBarcos();
        generarArrayMiTablero();
        generarMiTablero();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpn_generarMiTablero = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lst_barcos = new javax.swing.JList<>();
        btn_añadirBarco = new javax.swing.JButton();
        btn_arribaBarco = new javax.swing.JButton();
        btn_bajarBarco = new javax.swing.JButton();
        btn_derechaBarco = new javax.swing.JButton();
        btn_izquierdaBarco = new javax.swing.JButton();
        btn_confirmarBarco = new javax.swing.JButton();
        btn_guardarTablero = new javax.swing.JButton();
        jpn_mostrarBarcos = new javax.swing.JPanel();

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jpn_generarMiTablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jpn_generarMiTablero.setLayout(new java.awt.GridLayout(10, 11));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Generar tu tablero");

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lst_barcos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lst_barcos);

        btn_añadirBarco.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btn_añadirBarco.setText("Añadir barco selecionado");
        btn_añadirBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_añadirBarcoActionPerformed(evt);
            }
        });

        btn_arribaBarco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirLaFlota/imagenes/arriba.png"))); // NOI18N
        btn_arribaBarco.setEnabled(false);
        btn_arribaBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_arribaBarcoActionPerformed(evt);
            }
        });

        btn_bajarBarco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirLaFlota/imagenes/abajo.png"))); // NOI18N
        btn_bajarBarco.setEnabled(false);
        btn_bajarBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bajarBarcoActionPerformed(evt);
            }
        });

        btn_derechaBarco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirLaFlota/imagenes/derecha.png"))); // NOI18N
        btn_derechaBarco.setEnabled(false);
        btn_derechaBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_derechaBarcoActionPerformed(evt);
            }
        });

        btn_izquierdaBarco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirLaFlota/imagenes/izquierda.png"))); // NOI18N
        btn_izquierdaBarco.setEnabled(false);
        btn_izquierdaBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_izquierdaBarcoActionPerformed(evt);
            }
        });

        btn_confirmarBarco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hundirLaFlota/imagenes/tick.png"))); // NOI18N
        btn_confirmarBarco.setEnabled(false);
        btn_confirmarBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_confirmarBarcoActionPerformed(evt);
            }
        });

        btn_guardarTablero.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_guardarTablero.setText("Guardar");
        btn_guardarTablero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarTableroActionPerformed(evt);
            }
        });

        jpn_mostrarBarcos.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jpn_mostrarBarcosLayout = new javax.swing.GroupLayout(jpn_mostrarBarcos);
        jpn_mostrarBarcos.setLayout(jpn_mostrarBarcosLayout);
        jpn_mostrarBarcosLayout.setHorizontalGroup(
            jpn_mostrarBarcosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpn_mostrarBarcosLayout.setVerticalGroup(
            jpn_mostrarBarcosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_arribaBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_bajarBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btn_izquierdaBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(btn_derechaBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_confirmarBarco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_guardarTablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btn_añadirBarco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpn_mostrarBarcos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(jpn_mostrarBarcos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btn_añadirBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btn_arribaBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_izquierdaBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_derechaBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(btn_bajarBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btn_confirmarBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_guardarTablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpn_generarMiTablero, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jpn_generarMiTablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_añadirBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_añadirBarcoActionPerformed
        int indice = lst_barcos.getSelectedIndex();
        
        //obtener el barco selecionado para saber su longitud
        if (indice != -1) { // si hay algo selecionado
            btn_confirmarBarco.setEnabled(true);
            btn_añadirBarco.setEnabled(false);
            btn_arribaBarco.setEnabled(true);
            btn_bajarBarco.setEnabled(true);
            btn_derechaBarco.setEnabled(true);
            btn_izquierdaBarco.setEnabled(true);

            String selecion = (String) dlm_listaBarcos.get(indice);
            String[] parte = selecion.split(" ");
            int numero = Integer.parseInt(parte[2]);
//            for (Component component : selecion.getComponents()) {
//                if(component.getName().equalsIgnoreCase("dibujo")){
//                    JPanel panel = (JPanel) component;
//                    GridLayout gridLayout = (GridLayout) panel.getLayout();
//                    numero = gridLayout.getColumns();
//                }
//            }
            longitudBarco = numero;
            dlm_listaBarcos.remove(indice);

            int longitudBarcoAAñadir = longitudBarco;

            for (Component component : jpn_generarMiTablero.getComponents()) {
                String nombreComponente = component.getName();
                if (nombreComponente != null) {
                    // obtener fila y columna del componente
                    String[] partes = nombreComponente.split("-");
                    int fila = Integer.parseInt(partes[0]);
                    int columna = Integer.parseInt(partes[1]);
                    // saber si es del panel jugable
                    if (fila > 0 && columna > 0) {
                        // saber si esta en la zona azul
                        if (columna == 10) {
                            // toDo: comprobar longitud del barco
                            if (longitudBarcoAAñadir > 0) {
                                JPanel panel = (JPanel) component;
                                panel.setName(fila + "-" + columna + "-" + "moviendo");
                                miTablero[fila][columna] = "moviendo";
                                panel.setBackground(Color.red);
                                longitudBarcoAAñadir = longitudBarcoAAñadir - 1;
                            }
                        }

                    }
                }

            }
        } else {

        }
    }//GEN-LAST:event_btn_añadirBarcoActionPerformed

    private void btn_bajarBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bajarBarcoActionPerformed
        moverBarcoSelecionadoAbajo();
    }//GEN-LAST:event_btn_bajarBarcoActionPerformed

    private void btn_derechaBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_derechaBarcoActionPerformed
        moverBarcoSelecionadoDerecha();
    }//GEN-LAST:event_btn_derechaBarcoActionPerformed

    private void btn_arribaBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_arribaBarcoActionPerformed
        moverBarcoSelecionadoArriba();
    }//GEN-LAST:event_btn_arribaBarcoActionPerformed

    private void btn_izquierdaBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_izquierdaBarcoActionPerformed
        moverBarcoSelecionadoIzquierda();
    }//GEN-LAST:event_btn_izquierdaBarcoActionPerformed

    private void btn_confirmarBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_confirmarBarcoActionPerformed
        boolean valido = false;
        Barco barco = new Barco(longitudBarco);
        for (Component component : jpn_generarMiTablero.getComponents()) {
            String nombreComponente = component.getName();
            if (nombreComponente != null) {
                // obtener fila y columna del componente
                String[] partes = nombreComponente.split("-");
                int fila = Integer.parseInt(partes[0]);
                int columna = Integer.parseInt(partes[1]);
                // saber si es del panel jugable
                if (fila > 0 && columna > 0 && columna < 10) {
                    // si es el elemento que tiene que moverse
                    if (miTablero[fila][columna].equalsIgnoreCase("moviendo")) {
                        miTablero[fila][columna] = "barco";
                        barco.setPosicion(fila+"-"+columna);
                        
                        valido = true;
                    }
                }
            }
        }
        ventanaMenu.milistaDeBarcos.addElement(barco);
        if (valido) {
            btn_confirmarBarco.setEnabled(false);
            btn_añadirBarco.setEnabled(true);
            btn_arribaBarco.setEnabled(false);
            btn_bajarBarco.setEnabled(false);
            btn_derechaBarco.setEnabled(false);
            btn_izquierdaBarco.setEnabled(false);
        }
        actualizarTablero();
    }//GEN-LAST:event_btn_confirmarBarcoActionPerformed

    private void btn_guardarTableroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarTableroActionPerformed
        // TODO add your handling code here:
        ventanaMenu.miTablero = miTablero;
        setVisible(false);
    }//GEN-LAST:event_btn_guardarTableroActionPerformed

    private void actualizarTablero() {
        for (Component component : jpn_generarMiTablero.getComponents()) {
            String nombreComponente = component.getName();
            if (nombreComponente != null) {
                // obtener fila y columna del componente
                String[] partes = nombreComponente.split("-");
                int fila = Integer.parseInt(partes[0]);
                int columna = Integer.parseInt(partes[1]);
                String valor = miTablero[fila][columna];
                // saber si es del panel jugable
                if (fila > 0 && columna > 0) {
                    JPanel panel = (JPanel) component;
                    switch (valor) {
                        case "agua":
                            if (columna == 10) {
                                panel.setBackground(Color.cyan);
                            }
                            if (columna < 10) {
                                panel.setBackground(Color.lightGray);
                            }
                            break;
                        case "barco":
                            panel.setBackground(Color.GREEN);
                            break;
                        case "moviendo":
                            panel.setBackground(Color.red);
                            break;
                    }
                }
            }
        }
        jpn_generarMiTablero.revalidate();
        jpn_generarMiTablero.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(generarMiTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(generarMiTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(generarMiTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(generarMiTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new generarMiTablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_arribaBarco;
    private javax.swing.JButton btn_añadirBarco;
    private javax.swing.JButton btn_bajarBarco;
    private javax.swing.JButton btn_confirmarBarco;
    private javax.swing.JButton btn_derechaBarco;
    private javax.swing.JButton btn_guardarTablero;
    private javax.swing.JButton btn_izquierdaBarco;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpn_generarMiTablero;
    private javax.swing.JPanel jpn_mostrarBarcos;
    private javax.swing.JList<String> lst_barcos;
    // End of variables declaration//GEN-END:variables

    private void generarMiTablero() {
        GridLayout gridLayout = (GridLayout) jpn_generarMiTablero.getLayout();
        for (int fila = 0; fila < gridLayout.getRows(); fila++) {
            for (int columna = 0; columna < gridLayout.getColumns(); columna++) {
                if (fila == 0 && columna == 0) {
                    // esquina arriba izquierda
                    JPanel panel = new JPanel();
                    panel.setName(fila + "-" + columna + "-" + "letra");
                    jpn_generarMiTablero.add(panel);
                } else if (fila == 0 && columna > 0) {
                    //Linea de arriba (horizontal)
                    JLabel label = new JLabel(obtenerLetraHorizontal(columna));
                    label.setHorizontalAlignment(0);
                    label.setName(fila + "-" + columna + "-" + "letra");
                    label.setFont(new Font("fuente", 0, 35));
                    jpn_generarMiTablero.add(label);
                } else if (fila > 0 && columna == 0) {
                    // linea vertical
                    JLabel label = new JLabel(obtenerNumeroVertial(fila));
                    label.setHorizontalAlignment(0);
                    label.setName(fila + "-" + columna + "-" + "letra");
                    label.setFont(new Font("fuente", 0, 35));
                    jpn_generarMiTablero.add(label);
                } else { // zona de panel jugable
                    // añadir linea azul derecha
                    if (columna == 10) {
                        JPanel panel = new JPanel();
                        panel.setName(fila + "-" + columna + "-" + "agua");
                        panel.setBackground(Color.CYAN);
                        panel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                        jpn_generarMiTablero.add(panel);
                    } else { // añadir paneles normales
                        JPanel panel = new JPanel();
                        panel.setName(fila + "-" + columna + "-" + "agua");
                        panel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                        panel.setBackground(Color.LIGHT_GRAY);
                        jpn_generarMiTablero.add(panel);
                    }
                }
            }
            jpn_generarMiTablero.revalidate();
            jpn_generarMiTablero.repaint();
        }
    }

    private String obtenerLetraHorizontal(int columna) {
        String letra = "";
        switch (columna) {
            case 1:
                letra = "A";
                break;
            case 2:
                letra = "B";
                break;
            case 3:
                letra = "C";
                break;
            case 4:
                letra = "D";
                break;
            case 5:
                letra = "E";
                break;
            case 6:
                letra = "F";
                break;
            case 7:
                letra = "G";
                break;
            case 8:
                letra = "H";
                break;
            case 9:
                letra = "I";
                break;
        }
        return letra;
    }

    private String obtenerNumeroVertial(int fila) {
        String numero = "";
        switch (fila) {
            case 1:
                numero = "1";
                break;
            case 2:
                numero = "2";
                break;
            case 3:
                numero = "3";
                break;
            case 4:
                numero = "4";
                break;
            case 5:
                numero = "5";
                break;
            case 6:
                numero = "6";
                break;
            case 7:
                numero = "7";
                break;
            case 8:
                numero = "8";
                break;
            case 9:
                numero = "9";
                break;
        }
        return numero;
    }

    private void generarArrayMiTablero() {
        GridLayout gridLayout = (GridLayout) jpn_generarMiTablero.getLayout();
        for (int fila = 0; fila < gridLayout.getRows(); fila++) {
            for (int columna = 0; columna < gridLayout.getColumns(); columna++) {
                if (fila == 0 && columna == 0) {
                    // esquina arriba izquierda
                    miTablero[fila][columna] = "esquina";
                } else if (fila == 0 && columna > 0) {
                    //Linea de arriba (horizontal)
                    miTablero[fila][columna] = "letra";
                } else if (fila > 0 && columna == 0) {
                    // linea vertical
                    miTablero[fila][columna] = "numero";
                } else {
                    // añadir linea azul derechaa
                    if (columna == 10) {
                        miTablero[fila][columna] = "azul";
                    } else { // añadir paneles normales
                        miTablero[fila][columna] = "agua";
                    }
                }
            }
        }
    }

    private void moverBarcoSelecionadoIzquierda() {
        int vecesAMover = longitudBarco;
        int columnasAMover = 1;
        boolean sePuedeMover;

        do {
            sePuedeMover = true;
            for (Component component : jpn_generarMiTablero.getComponents()) {
                String nombreComponente = component.getName();
                if (nombreComponente != null) {
                    // obtener fila y columna del componente
                    String[] partes = nombreComponente.split("-");
                    int filaActual = Integer.parseInt(partes[0]);
                    int columnaActual = Integer.parseInt(partes[1]);
                    // saber si es del panel jugable
                    if (filaActual > 0 && columnaActual > 0) {
                        // si es el elemento que tiene que moverse
                        if (miTablero[filaActual][columnaActual].equalsIgnoreCase("moviendo")) {
                            // si no se sale de las filas
                            if ((columnaActual - columnasAMover) > 0) {
                                if (hayBarcoEnEsaPosicion(filaActual, columnaActual - columnasAMover)) {
                                    sePuedeMover = false;
                                }
                                vecesAMover = vecesAMover - 1;
                            }
                        }
                    }
                }
            }
            if (!sePuedeMover) {
                columnasAMover += 1;
            }

        } while (!sePuedeMover);

        if (sePuedeMover) {
            vecesAMover = longitudBarco;
            for (Component component : jpn_generarMiTablero.getComponents()) {
                String nombreComponente = component.getName();
                if (nombreComponente != null) {
                    // obtener fila y columna del componente
                    String[] partes = nombreComponente.split("-");
                    int filaActual = Integer.parseInt(partes[0]);
                    int columnaActual = Integer.parseInt(partes[1]);
                    // saber si es del panel jugable
                    if (filaActual > 0 && columnaActual > 0) {
                        // si es el elemento que tiene que moverse
                        if (miTablero[filaActual][columnaActual].equalsIgnoreCase("moviendo")) {
                            // si no se sale de las filas
                            if ((columnaActual - columnasAMover) > 0) {
                                miTablero[filaActual][columnaActual] = "agua";
                                miTablero[filaActual][columnaActual - columnasAMover] = "moviendo";
                                vecesAMover = vecesAMover - 1;
                            }
                        }
                    }
                }
            }
            actualizarTablero();
        }
    }

    private void moverBarcoSelecionadoArriba() {
        int vecesAMover = longitudBarco;
        boolean sePuedeMover = true;

        for (Component component : jpn_generarMiTablero.getComponents()) {
            String nombreComponente = component.getName();
            if (nombreComponente != null) {
                // obtener fila y columna del componente
                String[] partes = nombreComponente.split("-");
                int fila = Integer.parseInt(partes[0]);
                int columna = Integer.parseInt(partes[1]);
                // saber si es del panel jugable
                if (fila > 0 && columna > 0) {
                    // si es el elemento que tiene que moverse
                    if (miTablero[fila][columna].equalsIgnoreCase("moviendo")) {
//                        System.out.println("Se va a mover la fila " + fila + " y la columna " + columna);
                        // si no se sale de las filas
                        if ((fila - 1) > 0) {
                            if (hayBarcoEnEsaPosicion(fila - 1, columna)) {
                                sePuedeMover = false;
                            }
                            if (sePuedeMover) {
                                // si es el ultimo panel que se mueve
                                if (vecesAMover == 1) {
                                    miTablero[fila][columna] = "agua";
//                                    System.out.println("Se va a mover a fila " + (fila - 1) + " y la columna " + columna + " con valor moviendo");
                                    miTablero[fila - 1][columna] = "moviendo";
                                } else {
//                                    System.out.println("Se va a mover a fila " + (fila - 1) + " y la columna " + columna + " con valor moviendo");
                                    miTablero[fila - 1][columna] = "moviendo";
                                }
                                vecesAMover = vecesAMover - 1;
                            }
                        }
                    }
                }
            }
        }
        actualizarTablero();
    }

    public void moverBarcoSelecionadoAbajo() {
        int vecesAMover = longitudBarco;
        boolean sePuedeMover = true;
//        System.out.println("Se va a mover " + vecesAMover + " veces");
        GridLayout gridLayout = (GridLayout) jpn_generarMiTablero.getLayout();
        for (Component component : jpn_generarMiTablero.getComponents()) {
            String nombreComponente = component.getName();
            if (nombreComponente != null) {
                // obtener fila y columna del componente
                String[] partes = nombreComponente.split("-");
                int filaActual = Integer.parseInt(partes[0]);
                int columnaActual = Integer.parseInt(partes[1]);
                // saber si es del panel jugable
                if (filaActual > 0 && columnaActual > 0) {
                    // si es el elemento que tiene que moverse
                    if (miTablero[filaActual][columnaActual].equalsIgnoreCase("moviendo")) {
//                        System.out.println("Se va a mover la fila " + filaActual + " y la columna " + columnaActual);
                        // si no se sale de las filas
                        if ((filaActual + vecesAMover) < gridLayout.getRows()) {
                            // si es el primero panel que se mueve
                            if (hayBarcoEnEsaPosicion(filaActual + vecesAMover, columnaActual)) {
                                sePuedeMover = false;
                            }
                            if (sePuedeMover) {
                                if (vecesAMover == longitudBarco) {
                                    miTablero[filaActual][columnaActual] = "agua";

//                                    System.out.println("Se va a mover a fila " + (filaActual + vecesAMover) + " y la columna " + columnaActual + " con valor moviendo");
                                    miTablero[filaActual + vecesAMover][columnaActual] = "moviendo";
                                } else {
//                                    System.out.println("Se va a mover a fila " + (filaActual + vecesAMover) + " y la columna " + columnaActual + " con valor moviendo");
                                    miTablero[filaActual + vecesAMover][columnaActual] = "moviendo";
                                }
                                vecesAMover = vecesAMover - 1;
                            }
                        }
                    }
                }
            }
        }
        actualizarTablero();
    }

    public void moverBarcoSelecionadoDerecha() {
        int vecesAMover = longitudBarco;
        int cantidadASaltar = 0;
        boolean sePuedeMover;
        int columnasAMover = 1;

        // comprobar si se pueden mover todas las posiciones del barco a la nueva posicion
        do {
            sePuedeMover = true;
            for (Component component : jpn_generarMiTablero.getComponents()) {
                if (cantidadASaltar == 0) {
                    String nombreComponente = component.getName();
                    if (nombreComponente != null) {
                        // obtener fila y columna del componente
                        String[] partes = nombreComponente.split("-");
                        int filaActual = Integer.parseInt(partes[0]);
                        int columnaActual = Integer.parseInt(partes[1]);
                        // saber si es del panel jugable
                        if (filaActual > 0 && columnaActual > 0) {
                            // si es el elemento que tiene que moverse
                            if (miTablero[filaActual][columnaActual].equalsIgnoreCase("moviendo")) {
//                                System.out.println("Se va a mover la fila " + filaActual + " y la columna " + columnaActual);
                                // si no se sale de las filas
                                if ((columnaActual + 1) < 10) {
//                                    System.out.println("Se va a mover a fila " + filaActual + " y la columna " + (columnaActual + columnasAMover) + " con valor moviendo");
                                    // comprobar si hay un barco en la nueva posicion
                                    if (hayBarcoEnEsaPosicion(filaActual, columnaActual + columnasAMover)) {
                                        sePuedeMover = false;
                                    }
                                    vecesAMover = vecesAMover - 1;
                                    cantidadASaltar = columnasAMover;
                                }
                            }

                        }
                    }
                } else {
                    cantidadASaltar = cantidadASaltar - 1;
                }
            }
            if (!sePuedeMover) {
                columnasAMover += 1;
            }

        } while (!sePuedeMover);

        if (sePuedeMover) {
//            System.out.println("======================================");
//            System.out.println("Se van a mover " + columnasAMover + " columnas");
//            System.out.println("======================================");

            vecesAMover = longitudBarco;
            for (Component component : jpn_generarMiTablero.getComponents()) {
                if (cantidadASaltar == 0) {
                    String nombreComponente = component.getName();
                    if (nombreComponente != null) {
                        // obtener fila y columna del componente
                        String[] partes = nombreComponente.split("-");
                        int filaActual = Integer.parseInt(partes[0]);
                        int columnaActual = Integer.parseInt(partes[1]);
                        // saber si es del panel jugable
                        if (filaActual > 0 && columnaActual > 0) {
                            // si es el elemento que tiene que moverse
                            if (miTablero[filaActual][columnaActual].equalsIgnoreCase("moviendo")) {
//                                System.out.println("Se va a mover la fila " + filaActual + " y la columna " + columnaActual);
                                // si no se sale de las filas
                                if ((columnaActual + columnasAMover) < 10) {
//                                    System.out.println("Se va a mover a fila " + filaActual + " y la columna " + (columnaActual + columnasAMover) + " con valor moviendo");
                                    miTablero[filaActual][columnaActual] = "agua";
                                    miTablero[filaActual][columnaActual + columnasAMover] = "moviendo";
                                    vecesAMover = vecesAMover - 1;
                                    cantidadASaltar = columnasAMover;
                                }
                            }

                        }
                    }
                } else {
                    cantidadASaltar = cantidadASaltar - 1;
                }
            }
        }

        actualizarTablero();
    }

    private boolean hayBarcoEnEsaPosicion(int fila, int columna) {
        boolean hayBarco = false;
//        System.out.println("Comprobando si en la fila " + fila + " y en la columa " + columna + " hay un barco");
        if (miTablero[fila][columna].equalsIgnoreCase("barco")) {
//            System.out.println("  ->  Hay un barco");
            hayBarco = true;
        }
        return hayBarco;
    }

    private void generarListaBarcos() {
        dlm_listaBarcos.addElement("Barco de 2");
        dlm_listaBarcos.addElement("Barco de 3");
        dlm_listaBarcos.addElement("Barco de 4");
        dlm_listaBarcos.addElement("Barco de 5");
        
        GridLayout gridLayout = new GridLayout(4, 1);
        jpn_mostrarBarcos.setLayout(gridLayout);
        jpn_mostrarBarcos.add(new panelListaBarcos(2));
        jpn_mostrarBarcos.add(new panelListaBarcos(3));
        jpn_mostrarBarcos.add(new panelListaBarcos(4));
        jpn_mostrarBarcos.add(new panelListaBarcos(5));
        jpn_mostrarBarcos.revalidate();
        jpn_mostrarBarcos.repaint();
    }
    
}
