/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hundirLaFlota;

import static hundirLaFlota.ventanaMenu.miTablero;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Javie
 */
public class ventanaPartida extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    boolean servidorActivo = true;
    String ipRival;
    int puertoRival;
    boolean tableroRivalObtenido = false;
    boolean puedeEnviarCasillaPulsada = true;

    public ventanaPartida() {
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("imagenes/crucero.png")).getImage());
        cargarMiTablero();
//        cargarSuTablero();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpn_miTablero = new javax.swing.JPanel();
        jpn_suTablero = new javax.swing.JPanel();
        jpn_barraArriba = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txf_puertoRival = new javax.swing.JTextField();
        txf_ipRival = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tgb_guardarIPRival = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        txf_puerto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_activarServidor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setResizable(false);

        jpn_miTablero.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jpn_miTablero.setPreferredSize(new java.awt.Dimension(541, 4));
        jpn_miTablero.setLayout(new java.awt.GridLayout(10, 10));

        jpn_suTablero.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jpn_suTablero.setPreferredSize(new java.awt.Dimension(541, 4));
        jpn_suTablero.setLayout(new java.awt.GridLayout(10, 10));

        jpn_barraArriba.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Conexion con rival");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Puerto:");

        txf_puertoRival.setText("1234");

        txf_ipRival.setText("127.0.0.1");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("IP:");

        tgb_guardarIPRival.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tgb_guardarIPRival.setText("Guardar");
        tgb_guardarIPRival.setEnabled(false);
        tgb_guardarIPRival.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgb_guardarIPRivalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txf_ipRival, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txf_puertoRival, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tgb_guardarIPRival, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txf_ipRival))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txf_puertoRival)))
                    .addComponent(tgb_guardarIPRival, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txf_puerto.setText("1234");

        jLabel4.setText("Servidor Local");

        jLabel7.setText("Puerto:");

        btn_activarServidor.setText("Activar");
        btn_activarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_activarServidorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txf_puerto, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_activarServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txf_puerto)
                    .addComponent(btn_activarServidor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpn_barraArribaLayout = new javax.swing.GroupLayout(jpn_barraArriba);
        jpn_barraArriba.setLayout(jpn_barraArribaLayout);
        jpn_barraArribaLayout.setHorizontalGroup(
            jpn_barraArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpn_barraArribaLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpn_barraArribaLayout.setVerticalGroup(
            jpn_barraArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mi tablero");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tablero del rival");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jpn_barraArriba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jpn_miTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jpn_suTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpn_barraArriba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpn_miTablero, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addComponent(jpn_suTablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tgb_guardarIPRivalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgb_guardarIPRivalActionPerformed
        // TODO add your handling code here:
        if (tgb_guardarIPRival.isSelected()) {
            ipRival = txf_ipRival.getText();
            puertoRival = Integer.parseInt(txf_puertoRival.getText());
            txf_ipRival.setEnabled(false);
            txf_puertoRival.setEnabled(false);
            enviarTablero(miTablero, ipRival, puertoRival);
        } else {
            txf_ipRival.setEnabled(true);
            txf_puertoRival.setEnabled(true);
        }
    }//GEN-LAST:event_tgb_guardarIPRivalActionPerformed

    private void btn_activarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_activarServidorActionPerformed
        // TODO add your handling code here:
        txf_puerto.setEnabled(false);
        tgb_guardarIPRival.setEnabled(true);
        btn_activarServidor.setEnabled(false);
        abrirHiloServidorParaObtenerTablero();
    }//GEN-LAST:event_btn_activarServidorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaPartida().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_activarServidor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jpn_barraArriba;
    private javax.swing.JPanel jpn_miTablero;
    private javax.swing.JPanel jpn_suTablero;
    private javax.swing.JToggleButton tgb_guardarIPRival;
    private javax.swing.JTextField txf_ipRival;
    private javax.swing.JTextField txf_puerto;
    private javax.swing.JTextField txf_puertoRival;
    // End of variables declaration//GEN-END:variables

    private void cargarMiTablero() {
        GridLayout gridLayout = (GridLayout) jpn_miTablero.getLayout();
        for (int fila = 0; fila < gridLayout.getRows(); fila++) {
            for (int columna = 0; columna < gridLayout.getColumns(); columna++) {
                if (fila == 0 && columna == 0) {
                    // esquina arriba izquierda
                    JPanel panel = new JPanel();
                    panel.setName(fila + "-" + columna);
//                    panel.setBackground(Color.LIGHT_GRAY);
//                    panel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                    jpn_miTablero.add(panel);
                } else if (fila == 0 && columna > 0) {
                    //Linea de arriba (horizontal)
                    JLabel label = new JLabel(obtenerLetraHorizontal(columna));
                    label.setHorizontalAlignment(0);
                    label.setFont(new Font("fuente", 0, 35));
                    jpn_miTablero.add(label);
                } else if (fila > 0 && columna == 0) {
                    // linea vertical
                    JLabel label = new JLabel(obtenerNumeroVertial(fila));
                    label.setHorizontalAlignment(0);
                    label.setFont(new Font("fuente", 0, 35));
                    jpn_miTablero.add(label);
                } else {
                    JPanel panel = new JPanel();
                    panel.setName(fila + "-" + columna);
                    panel.setBackground(Color.LIGHT_GRAY);
                    panel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                    if (miTablero[fila][columna].equalsIgnoreCase("barco")) {
                        panel.setBackground(new Color(150, 150, 150));
                    }
                    jpn_miTablero.add(panel);
                }

            }
            jpn_miTablero.revalidate();
            jpn_miTablero.repaint();
        }
    }

    private void cargarSuTablero() {
        GridLayout gridLayout = (GridLayout) jpn_suTablero.getLayout();
        for (int fila = 0; fila < gridLayout.getRows(); fila++) {
            for (int columna = 0; columna < gridLayout.getColumns(); columna++) {
                if (fila == 0 && columna == 0) {
                    // esquina arriba izquierda
                    JPanel panel = new JPanel();
                    panel.setName(fila + "-" + columna);
//                    panel.setBackground(Color.LIGHT_GRAY);
//                    panel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                    jpn_suTablero.add(panel);
                } else if (fila == 0 && columna > 0) {
                    //Linea de arriba (horizontal)
                    JLabel label = new JLabel(obtenerLetraHorizontal(columna));
                    label.setHorizontalAlignment(0);
                    label.setFont(new Font("fuente", 0, 35));
                    jpn_suTablero.add(label);
                } else if (fila > 0 && columna == 0) {
                    // linea vertical
                    JLabel label = new JLabel(obtenerNumeroVertial(fila));
                    label.setHorizontalAlignment(0);
                    label.setFont(new Font("fuente", 0, 35));
                    jpn_suTablero.add(label);
                } else {
                    JPanel panel = new JPanel();
                    panel.setName(fila + "-" + columna);
                    panel.setBackground(Color.LIGHT_GRAY);
                    panel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                    panel.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (puedeEnviarCasillaPulsada) {
                                Component comp = e.getComponent();
                                if (comp instanceof JPanel) {
                                    JPanel panelPulsado = (JPanel) comp;

                                    String nombreComp = panelPulsado.getName();
                                    String[] partes = nombreComp.split("-");
                                    int fila = Integer.parseInt(partes[0]);
                                    int columna = Integer.parseInt(partes[1]);
                                    System.out.println("Click en su tablero en Fila " + fila + " columna " + columna);
                                    if (ventanaMenu.suTablero[fila][columna].equalsIgnoreCase("barco")) {
                                        panelPulsado.setBackground(Color.red);
                                    } else if (ventanaMenu.suTablero[fila][columna].equalsIgnoreCase("agua")) {
                                        panelPulsado.setBackground(Color.blue);
                                    }
                                    enviarCasillaPulsada(fila + "-" + columna);
                                }
                            }
                        }
                        @Override
                        public void mousePressed(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                        }
                    });
                    jpn_suTablero.add(panel);
                }

            }
//        gridLayout.
            jpn_suTablero.revalidate();
            jpn_suTablero.repaint();
        }
        jpn_suTablero.repaint();
    }

    private String obtenerLetraHorizontal(int columna) {
        String letra = "";
        switch (columna) {
            case 1:
                letra = "A";
                break;
            case 2:
                letra = "B";
                break;
            case 3:
                letra = "C";
                break;
            case 4:
                letra = "D";
                break;
            case 5:
                letra = "E";
                break;
            case 6:
                letra = "F";
                break;
            case 7:
                letra = "G";
                break;
            case 8:
                letra = "H";
                break;
            case 9:
                letra = "I";
                break;
        }
        return letra;
    }

    private String obtenerNumeroVertial(int fila) {
        String numero = "";
        switch (fila) {
            case 1:
                numero = "1";
                break;
            case 2:
                numero = "2";
                break;
            case 3:
                numero = "3";
                break;
            case 4:
                numero = "4";
                break;
            case 5:
                numero = "5";
                break;
            case 6:
                numero = "6";
                break;
            case 7:
                numero = "7";
                break;
            case 8:
                numero = "8";
                break;
            case 9:
                numero = "9";
                break;
        }
        return numero;
    }

    private void abrirHiloServidorObtenerCasillaPulsada() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                DataInputStream din = null;
                DataOutputStream dout = null;
                ServerSocket servidor = null;
                Socket socket = null;
                while (servidorActivo) {
                    try {
                        servidor = new ServerSocket(Integer.parseInt(txf_puerto.getText()));
                        while (true) {
                            // Aceptamos conexion de un cliente
                            socket = servidor.accept();
                            System.out.println("Se ha conectado el equipo " + socket.getInetAddress());
                            din = new DataInputStream(socket.getInputStream());// leer lo que envia el cliente
                            dout = new DataOutputStream(socket.getOutputStream());// enviar al cliente
                            //Recibimos del cliente
                            String lectura = din.readUTF();
                            //Respondemos al cliente
//                        dout.writeUTF(lectura);
//                        dout.flush();
                            System.out.println("==========================================");
                            System.out.println("He recibido " + lectura);
                            System.out.println("==========================================");

                            String[] partes = lectura.split("-");
                            int fila = Integer.parseInt(partes[0]);
                            int columna = Integer.parseInt(partes[1]);

                            casillaPulsadaEnMiTablero(fila, columna);

                        }
                    } catch (IOException ex) {
                        Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            if (servidor != null) {
                                servidor.close();
                            }
                            if (socket != null) {
                                socket.close();
                            }
                            if (din != null) {
                                din.close();
                            }
                            if (dout != null) {
                                dout.close();
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

        }).start();
    }

    private void casillaPulsadaEnMiTablero(int fila, int columna) {
        for (Component component : jpn_miTablero.getComponents()) {
            if (component instanceof JPanel) {
                JPanel panel = (JPanel) component;
                if (panel.getName().equalsIgnoreCase(fila + "-" + columna)) {
                    switch (miTablero[fila][columna]) {
                        case "barco":
                            panel.setBackground(Color.red);
                            break;
                        case "agua":
                            panel.setBackground(Color.blue);
                            break;
                    }
                }
            }

        }
        jpn_miTablero.revalidate();
        jpn_miTablero.repaint();
        puedeEnviarCasillaPulsada = true;
    }

    private void abrirHiloServidorParaObtenerTablero() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ObjectInputStream din = null;
                ServerSocket servidor = null;
                Socket socket = null;
                try {
                    servidor = new ServerSocket(Integer.parseInt(txf_puerto.getText()));
                    while (!tableroRivalObtenido) {
                        // Aceptamos conexion de un cliente
                        socket = servidor.accept();
                        System.out.println("Se ha conectado el equipo " + socket.getInetAddress());
                        din = new ObjectInputStream(socket.getInputStream());// leer lo que envia el cliente
                        //Recibimos del cliente
                        String[][] tableroRival = (String[][]) din.readObject();
                        //Respondemos al cliente
                        System.out.println("==========================================");
                        System.out.println("He recibido el tablero");
                        System.out.println("==========================================");
                        ventanaMenu.suTablero = tableroRival;
                        tableroRivalObtenido = true;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        if (servidor != null) {
                            servidor.close();
                            System.out.println("Servidor cerrado");
                        }
                        if (socket != null) {
                            socket.close();
                        }
                        if (din != null) {
                            din.close();
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                cargarSuTablero();
                abrirHiloServidorObtenerCasillaPulsada();
            }
        }).start();
    }

    private void enviarCasillaPulsada(String casillaSelecionada) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                DataInputStream din = null;
                DataOutputStream dout = null;
                Socket socket = null;

                try {
                    boolean casillaEnviada = false;
                    // Conexion con el servidor
                    socket = new Socket(ipRival, puertoRival);

                    dout = new DataOutputStream(socket.getOutputStream());// enviar al servidor
                    din = new DataInputStream(socket.getInputStream());// leer lo que nos manda el servidor

                    while (!casillaEnviada) {
                        System.out.println("======================================");
                        System.out.println("Se va a mandar " + casillaSelecionada);
                        System.out.println("======================================");
                        dout.writeUTF(casillaSelecionada);
//                        casillaSelecionada = null;
                        dout.flush();

                        casillaEnviada = true;
                        puedeEnviarCasillaPulsada = false;

                        //Recibimos respuesta del servidor
//                        String respuesta = din.readUTF();
//                        System.out.println(respuesta);
                    }

                } catch (IOException ex) {
                    System.out.println("Puerto no abierto");
                    Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        if (socket != null) {
                            socket.close();
                        }
                        if (din != null) {
                            din.close();
                        }
                        if (dout != null) {
                            dout.close();
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
    }

    private void enviarTablero(String[][] tablero, String ip, int puerto) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ObjectOutputStream dout = null;
                Socket socket = null;

                try {
                    // Conexion con el servidor
                    socket = new Socket(ip, puerto);

                    dout = new ObjectOutputStream(socket.getOutputStream());// enviar al servidor

                    System.out.println("Se va a mandar el tablero");
                    dout.writeObject(tablero);
                    dout.flush();

                } catch (IOException ex) {
                    System.out.println("Puerto no abierto");
                    Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        if (socket != null) {
                            socket.close();
                        }
                        if (dout != null) {
                            dout.close();
                        }
                    } catch (IOException ex) {

                        Logger.getLogger(ventanaPartida.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
    }
}
